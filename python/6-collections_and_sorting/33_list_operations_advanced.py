# 33_list_operations_advanced.py
# 리스트 탐색, 수정, 슬라이싱, 반복, 추가, 삭제, 정렬, 셔플, enumerate 예제 모음

# ------------------------------------------------------------
# 1) 리스트에서 특정 요소의 위치(index)
# ------------------------------------------------------------
solarsys = ['태양', '수성', '금성', '지구', '화성', '목성', '토성', '천왕성', '해왕성', '지구']
planet = '지구'
pos = solarsys.index(planet)
print(f'{planet}은(는) 태양계에서 {pos}번째에 위치하고 있습니다.')

# 동일한 요소가 여러 개 있을 경우, 시작 인덱스 지정 가능
pos = solarsys.index(planet, 5)
print(f'{planet}은(는) 태양계에서 {pos}번째에 위치하고 있습니다.')

# ------------------------------------------------------------
# 2) 리스트의 값 수정
# ------------------------------------------------------------
solarsys = ['태양', '수성', '금성', '지구', '화성', '목성', '토성', '천왕성', '해왕성']
planet = '화성'
pos = solarsys.index(planet)
solarsys[pos] = 'Mars'  # 해당 위치 값 변경
print('\n[리스트 값 수정 결과]')
print(solarsys)

# ------------------------------------------------------------
# 3) 슬라이싱으로 리스트 구분
# ------------------------------------------------------------
rock_planets = solarsys[1:4]
gas_planets = solarsys[4:]
print('\n[슬라이싱으로 구분]')
print('암석형 행성:', rock_planets)
print('가스형 행성:', gas_planets)

# ------------------------------------------------------------
# 4) 짝수 인덱스 요소 추출
# ------------------------------------------------------------
listdata = list(range(1, 21))
evenlist = listdata[1::2]
print('\n[짝수 인덱스 요소 추출]')
print(evenlist)

# ------------------------------------------------------------
# 5) 리스트 역순 (reverse 메서드)
# ------------------------------------------------------------
listdata = list(range(5))
listdata.reverse()
print('\n[reverse 메서드 사용]')
print(listdata)

# ------------------------------------------------------------
# 6) reversed() 내장함수
# ------------------------------------------------------------
listdata = list(range(5))
ret1 = reversed(listdata)
print('\n[reversed 함수 사용]')
print('원본 리스트:', listdata)
print('역순 리스트:', list(ret1))
ret2 = listdata[::-1]
print('슬라이싱 이용:', ret2)

# ------------------------------------------------------------
# 7) 리스트 반복 (* 연산자)
# ------------------------------------------------------------
listdata = list(range(3))
ret = listdata * 3
print('\n[리스트 반복 (* 연산자)]')
print(ret)

# ------------------------------------------------------------
# 8) 사용자 입력으로 리스트 생성 (append)
# ------------------------------------------------------------
listdata = []
for i in range(3):
    txt = input(f'\n리스트에 추가할 값을 입력하세요[{i+1}/3]: ')
    listdata.append(txt)
    print('현재 리스트:', listdata)

# ------------------------------------------------------------
# 9) 리스트에 요소 삽입 (insert)
# ------------------------------------------------------------
solarsys = ['태양', '수성', '금성', '지구', '화성', '목성', '토성', '천왕성', '해왕성']
pos = solarsys.index('목성')
solarsys.insert(pos, '소행성')
print('\n[insert 사용 결과]')
print(solarsys)

# ------------------------------------------------------------
# 10) 요소 삭제 (del, remove)
# ------------------------------------------------------------
solarsys = ['태양', '수성', '금성', '지구', '화성', '목성', '토성', '천왕성', '해왕성']
del solarsys[0]
print('\n[del 사용 - 첫 요소 삭제]', solarsys)
del solarsys[-2]
print('[del 사용 - 뒤에서 두 번째 삭제]', solarsys)

solarsys = ['태양', '수성', '금성', '지구', '화성']
solarsys.remove('태양')
print('[remove 사용]', solarsys)

solarsys = ['태양', '수성', '금성', '지구', '화성']
del solarsys[1:3]
print('[슬라이싱 삭제]', solarsys)

# ------------------------------------------------------------
# 11) 리스트 크기와 특정 값 개수
# ------------------------------------------------------------
listdata = [2, 2, 1, 3, 8, 5, 7, 6, 3, 6, 2, 3, 9, 4, 4]
listsize = len(listdata)
print('\n리스트 크기:', listsize)
c1 = listdata.count(2)
c2 = listdata.count(7)
print('2의 개수:', c1)
print('7의 개수:', c2)

# ------------------------------------------------------------
# 12) 리스트 전체 삭제
# ------------------------------------------------------------
listdata = [1, 2, 3]
del listdata
try:
    print(listdata)
except NameError:
    print('\n리스트가 완전히 삭제되었습니다.')

# ------------------------------------------------------------
# 13) 리스트 정렬 (sort, sorted)
# ------------------------------------------------------------
namelist = ['Mary', 'Sams', 'Aemy', 'Tom', 'Michale', 'Bob', 'Kelly']
namelist.sort()
print('\n[sort()] 오름차순 정렬:', namelist)

namelist = ['Mary', 'Sams', 'Aemy', 'Tom', 'Michale', 'Bob', 'Kelly']
ret1 = sorted(namelist)
ret2 = sorted(namelist, reverse=True)
print('[sorted()] 원본:', namelist)
print('오름차순:', ret1)
print('내림차순:', ret2)

# ------------------------------------------------------------
# 14) 리스트 셔플 (random.shuffle)
# ------------------------------------------------------------
from random import shuffle
listdata = list(range(1, 11))
for i in range(3):
    shuffle(listdata)
    print('\n셔플 결과:', listdata)

# ------------------------------------------------------------
# 15) enumerate()로 인덱스와 값 함께 사용
# ------------------------------------------------------------
solarsys = ['태양', '수성', '금성', '지구', '화성', '목성', '토성', '천왕성', '해왕성']
ret = list(enumerate(solarsys))
print('\n[enumerate] 전체 튜플 리스트:', ret)

for i, body in enumerate(solarsys):
    print(f'태양계의 {i}번째 천체: {body}')
